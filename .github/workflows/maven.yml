# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven

on:
  push:
    branches: [ "main", "development", "v*" ]
    tags: ["*"]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging
  release:
    name: release
    if: contains(github.ref, 'tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@master
        with:
          name: Package
          path: staging
      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
      - uses: montudor/action-zip@v1
        with:
          args: zip -r ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}.zip . -i staging/*
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ github.ref }}
          body_path: releases/CHANGELOG-${{ steps.get_version.outputs.VERSION }}.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip